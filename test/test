#!/bin/bash

function testHelp() {
  ../question --help 2> /tmp/stderr > /tmp/stdout
  assertEquals "stdout"         "USAGE:"                    "$(head -n1 /tmp/stdout)"
}

function testYesNo() {
  yes no | ${Q} 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "1"
  assertEquals "stdout"         ""                          "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (yes|no)? "       "$(cat /tmp/stderr)"

  yes yes | ${Q} 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                "0"
  assertEquals "stdout"         ""                          "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (yes|no)? "       "$(cat /tmp/stderr)"

  yes no | ${Q} --verbose 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         "no"                        "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (yes|no)? "       "$(cat /tmp/stderr)"

  yes yes | ${Q} --verbose 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "yes exit status" "${status}"                "0"
  assertEquals "stdout"         "yes"                       "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (yes|no)? "       "$(cat /tmp/stderr)"

  yes blah | ${Q} 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "blah exit status" "${status}"               "1"
  assertEquals "stdout"         "Invalid Response!"         "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (yes|no)? "       "$(cat /tmp/stderr)"
}

function testDate() {
  yes "1/1/2001" | ${Q} --type=date 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         "2001-01-01 00:00:00+01:00" "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (date)? "         "$(cat /tmp/stderr)"

  yes "blah" | ${Q} --type=date 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "1"
  assertEquals "stdout"         "Not a date!"               "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (date)? "         "$(cat /tmp/stderr)"

  # TODO: write a test confirming behaviour when GNU date does not exist.
}

function testMultiword() {
  yes "a string" | ${Q} --type=multiword 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         "a string"                  "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (string)? "       "$(cat /tmp/stderr)"

  yes "word" | ${Q} --type=multiword 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         "word"                      "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (string)? "       "$(cat /tmp/stderr)"

  yes "" | ${Q} --type=multiword 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "1"
  assertEquals "stdout"         "Invalid Response!"         "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (string)? "       "$(cat /tmp/stderr)"
}

function testList() {
  yes "one,two" | ${Q} --type=list 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         '"one" "two"'               "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (comma delimited list)? " "$(cat /tmp/stderr)"

  yes "one, two" | ${Q} --type=list 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         '"one" "two"'               "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (comma delimited list)? " "$(cat /tmp/stderr)"

  yes "one, two,     three" | ${Q} --type=list 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         '"one" "two" "three"'       "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (comma delimited list)? " "$(cat /tmp/stderr)"

  yes "one, two   ,three" | ${Q} --type=list 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         '"one" "two" "three"'       "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (comma delimited list)? " "$(cat /tmp/stderr)"

  yes "one, two,  three" | ${Q} --type=list 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         '"one" "two" "three"'       "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (comma delimited list)? " "$(cat /tmp/stderr)"

  yes "one, two three" | ${Q} --type=list 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         '"one" "two three"'         "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (comma delimited list)? " "$(cat /tmp/stderr)"

  yes "one" | ${Q} --type=list 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         '"one"'                     "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (comma delimited list)? " "$(cat /tmp/stderr)"

  yes "quote (\")" | ${Q} --type=list 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         '"quote (\")"'                      "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (comma delimited list)? " "$(cat /tmp/stderr)"

  yes ",," | ${Q} --type=list 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         '"" "" ""'                  "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (comma delimited list)? " "$(cat /tmp/stderr)"

  yes "" | ${Q} --type=list 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "1"
  assertEquals "stdout"         "Invalid Response!"         "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (comma delimited list)? " "$(cat /tmp/stderr)"
}

function testEnvironment() {
  yes "staging" | ${Q} --type=environment 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         "staging"                   "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (testing|staging|production)? "       "$(cat /tmp/stderr)"

  yes "testing" | ${Q} --type=environment 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         "testing"                   "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (testing|staging|production)? "       "$(cat /tmp/stderr)"

  yes "production" | ${Q} --type=environment 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         "production"                "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (testing|staging|production)? "       "$(cat /tmp/stderr)"

  yes "something else" | ${Q} --type=environment 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "1"
  assertEquals "stdout"         "Not a valid environment!"  "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (testing|staging|production)? "       "$(cat /tmp/stderr)"
}

function testExistingFile() {
  yes `basename $0` | ${Q} --type=existing-file 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         `basename $0`               "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (file)? "         "$(cat /tmp/stderr)"

  yes "/tmp/file with spaces" | ${Q} --type=existing-file 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         "/tmp/file with spaces"     "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (file)? "         "$(cat /tmp/stderr)"

  yes /tmp/file\ with\ spaces | ${Q} --type=existing-file 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         "/tmp/file with spaces"     "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (file)? "         "$(cat /tmp/stderr)"

  yes "nonexistantfile" | ${Q} --type=existing-file 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "1"
  assertEquals "stdout"         "File does not exist!"    "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (file)? "       "$(cat /tmp/stderr)"
}

function testInstanceId() {
  yes "i-fff2434d" | ${Q} --type=instance-id 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         "i-fff2434d"                "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (i-xxxxxxxx)? "   "$(cat /tmp/stderr)"

  yes "i-xxxxxxxx" | ${Q} --type=instance-id 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "1"
  assertEquals "stdout"         "Not a valid instance-id!"  "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (i-xxxxxxxx)? "   "$(cat /tmp/stderr)"

  yes "" | ${Q} --type=instance-id 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "1"
  assertEquals "stdout"         "Not a valid instance-id!"  "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (i-xxxxxxxx)? "   "$(cat /tmp/stderr)"
}

function testAmi() {
  yes "ami-fff2434d" | ${Q} --type=ami 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         "ami-fff2434d"              "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (ami-xxxxxxxx)? " "$(cat /tmp/stderr)"

  yes "ami-xxxxxxxx" | ${Q} --type=ami 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "1"
  assertEquals "stdout"         "Invalid Response!"         "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (ami-xxxxxxxx)? " "$(cat /tmp/stderr)"

  yes "" | ${Q} --type=ami 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "1"
  assertEquals "stdout"         "Invalid Response!"         "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (ami-xxxxxxxx)? " "$(cat /tmp/stderr)"
}

function testInteger() {
  yes "22" | ${Q} --type=integer 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         "22"                        "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (integer)? "      "$(cat /tmp/stderr)"

  yes "string" | ${Q} --type=integer 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "1"
  assertEquals "stdout"         "Invalid Response!"         "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (integer)? "      "$(cat /tmp/stderr)"
}

function testSingleword() {
  yes "abcdefg" | ${Q} --type=singleword 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         "abcdefg"                   "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (single word)? "  "$(cat /tmp/stderr)"

  yes "a string of words" | ${Q} --type=singleword 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "1"
  assertEquals "stdout"         "Invalid Response!"         "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (single word)? "  "$(cat /tmp/stderr)"

  yes "CamelCase" | ${Q} --type=singleword 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         "CamelCase"                 "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (single word)? "  "$(cat /tmp/stderr)"
}

function testInvalidType() {
  yes "abcdefg" | ${Q} --type=invalid 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "1"
  assertEquals "stdout"         "USAGE:"                    "$(head -n1 /tmp/stdout)"
}

function testVerbose() {
  yes no | ${Q} --verbose 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         "no"                        "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (yes|no)? "       "$(cat /tmp/stderr)"

  yes yes | ${Q} --verbose 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         "yes"                       "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (yes|no)? "       "$(cat /tmp/stderr)"

  yes single | ${Q} --verbose --type=singleword 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         "single"                    "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (single word)? "  "$(cat /tmp/stderr)"
}

function testQuiet() {
  yes yes | ${Q} --quiet 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         ""                          "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (yes|no)? "       "$(cat /tmp/stderr)"

  yes no | ${Q} --quiet 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "1"                         "${status}"
  assertEquals "stdout"         ""                          "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (yes|no)? "       "$(cat /tmp/stderr)"

  yes single | ${Q} --quiet --type=singleword 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         ""                          "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question (single word)? "  "$(cat /tmp/stderr)"
}

function testRevalidate() {
  yes "blah" | ../question --no-colour --no-notify question 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "1"
  assertEquals "stdout"         "you seem to be having a hard time. ;)"         "$(cat /tmp/stdout)"
}

function testColour() {
  yes "yes" | ../question --no-notify --no-revalidate question 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stderr"         "[35mquestion (yes|no)? (B[m" "$(cat /tmp/stderr)"
}

function testWithoutQuestion() {
  yes "yes" | ../question --no-notify --no-revalidate --no-colour 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "0"                         "${status}"
  assertEquals "stdout"         ""                          "$(cat /tmp/stdout)"
  assertEquals "stderr"         "Please answer... (yes|no)? "  "$(cat /tmp/stderr)"
}

function testAcceptedInputs() {
  yes "accepted" | ${Q} --accepted-inputs=accepted 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         "accepted"                  "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question ('accepted')? "     "$(cat /tmp/stderr)"

  yes "accepted" | ${Q} --accepted-inputs=a......d 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         "accepted"                  "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question ('a......d')? "     "$(cat /tmp/stderr)"

  yes "a" | ${Q} --accepted-inputs="(a|b)" 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         "a"                  "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question ('(a|b)')? "          "$(cat /tmp/stderr)"

  yes "b" | ${Q} --accepted-inputs="(a|b)" 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         "b"                  "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question ('(a|b)')? "          "$(cat /tmp/stderr)"

  yes "a" | ${Q} --accepted-inputs="^[^a]$" 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "1"
  assertEquals "stdout"         "Invalid Response!"         "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question ('^[^a]$')? "     "$(cat /tmp/stderr)"

  yes "b" | ${Q} --accepted-inputs="^[^a]$" 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         "b"                         "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question ('^[^a]$')? "     "$(cat /tmp/stderr)"

  yes "aaa" | ${Q} --accepted-inputs="^a{3}$" 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         "aaa"                       "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question ('^a{3}$')? "     "$(cat /tmp/stderr)"

  yes "aaaa" | ${Q} --accepted-inputs="^a{3}$" 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "1"
  assertEquals "stdout"         "Invalid Response!"         "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question ('^a{3}$')? "     "$(cat /tmp/stderr)"

  yes "blah" | ${Q} --accepted-inputs=accepted 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "1"
  assertEquals "stdout"         "Invalid Response!"         "$(cat /tmp/stdout)"
  assertEquals "stderr"         "question ('accepted')? "     "$(cat /tmp/stderr)"
}

function testExamples() {
  q="../question --type=multiword --no-notify --no-colour --no-revalidate"
  yes "cows, horses and sheep" | $q "What type of animals do you farm" 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         "cows, horses and sheep"   "$(cat /tmp/stdout)"
  assertEquals "stderr"         "What type of animals do you farm (string)? " "$(cat /tmp/stderr)"

  q="../question --type=integer --no-notify --no-colour --no-revalidate"
  yes 30 | $q "How many animals" 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         "30"   "$(cat /tmp/stdout)"
  assertEquals "stderr"         "How many animals (integer)? " "$(cat /tmp/stderr)"

  q="../question --no-notify --no-colour --no-revalidate"
  yes yes | $q "Do you have any camels" 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         ""                          "$(cat /tmp/stdout)"
  assertEquals "stderr"         "Do you have any camels (yes|no)? " "$(cat /tmp/stderr)"

  q="../question --verbose --no-notify --no-colour --no-revalidate"
  yes yes | $q "Are you a farmer" 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         "yes"                       "$(cat /tmp/stdout)"
  assertEquals "stderr"         "Are you a farmer (yes|no)? " "$(cat /tmp/stderr)"

  q="../question --no-colour --no-notify --type=list"
  yes "2, 3, 4" | $q "What scores did you get" 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         '"2" "3" "4"'               "$(cat /tmp/stdout)"
  assertEquals "stderr"         "What scores did you get (comma delimited list)? " "$(cat /tmp/stderr)"

  q="../question --no-colour --no-notify --accepted-inputs=^(boy|girl)$"
  yes "boy" | $q "Whats your gender" 2> /tmp/stderr > /tmp/stdout
  status=$?
  assertEquals "exit status"    "${status}"                 "0"
  assertEquals "stdout"         'boy'                       "$(cat /tmp/stdout)"
  assertEquals "stderr"         "Whats your gender ('^(boy|girl)$')? " "$(cat /tmp/stderr)"
}

function oneTimeSetUp() {
  Q="../question --no-colour --no-notify --no-revalidate question"
  touch /tmp/file\ with\ spaces
}

function TearDown() {
  rm /tmp/stdout
  rm /tmp/stderr
  rm /tmp/file\ with\ spaces
}

# load and run shUnit2
source ./shunit/src/shunit2

# vim: ai ts=2 sw=2 et sts=2 ft=sh
