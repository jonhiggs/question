#!/usr/bin/env bash

function usage() {
  if [ $# -ne 2 ];  then
  cat <<EOF
USAGE:
  $(basename $0) [OPTIONS] <question>

OPTIONS:
  --no-colour               Don't colour the string.
  --no-notify               Do not attempt to notify with terminal-notifier.
  --no-revalidate           Exit with error if first answer is invalid.
  --quiet                   Do not echo the answer.
  --title=    string        Title to send to terminal notifier.
  --type=     yes_no        Either 'yes' or 'no'. (default)
              environment   Either 'testing', 'staging' or 'production'.
              instance-id   An AWS instance-id like i-aaaaaaaa.
              integer       A number.
              multiword     A string of words.
              singleword    A single word.
  --verbose                 Echo the answer.

EOF
    exit 1
  fi
}

function __format_question() {
  case ${TYPE} in
    "environment")  QUESTION="${QUESTION} (testing|staging|production)? " ;;
    "instance-id")  QUESTION="${QUESTION} (i-xxxxxxxx)? " ;;
    "integer")      QUESTION="${QUESTION} (integer)? " ;;
    "multiword")    QUESTION="${QUESTION} (string)? " ;;
    "singleword")   QUESTION="${QUESTION} (single word)? " ;;
    "yes_no")       QUESTION="${QUESTION} (yes|no)? " ;;
    *)              return 1 ;;
  esac
}

function __notifier() {
  if [[ "${NOTIFY}" == "no" ]]; then return 0; fi
  if ! which terminal-notifier &> /dev/null; then return 0; fi

  terminal-notifier \
    -message "${QUESTION}?" \
    -title "${TITLE}" \
    > /dev/null
}

function __type_valid() {
  case ${TYPE} in
    "environment")  return 0 ;;
    "instance-id")  return 0 ;;
    "integer")      return 0 ;;
    "multiword")    return 0 ;;
    "singleword")   return 0 ;;
    "yes_no")       return 0 ;;
    *)              return 1 ;;
  esac
}

function __answer_valid() {
  if [[ -z "${ANSWER}" ]]; then return 1; fi
  if [[ "${ATTEMPT}" -gt 30 ]]; then
    echo "you seem to be having a hard time. ;)"
    exit 1
  fi

  if [[ -z "${ATTEMPT}" ]]; then
    ATTEMPT=1
  else
    ATTEMPT=$(( ${ATTEMPT} + 1 ))
  fi

  case "${TYPE}" in
    "yes_no")
      [[ "${ANSWER}" == "yes" ]] || [[ "${ANSWER}" == "no" ]]
      return $?
    ;;
    "multiword")
      [[ ! -z "${ANSWER}" ]]
      return $?
    ;;
    "singleword")
      echo "${ANSWER}" | egrep -i "^[0-9a-z._-]+$" &> /dev/null
      return $?
    ;;
    "integer")
      echo "${ANSWER}" | egrep "^[0-9]+$" &> /dev/null
      return $?
    ;;
    "environment")
      # TODO: grep may be better for this
      [[ "${ANSWER}" == "testing" ]] ||
        [[ "${ANSWER}" == "staging" ]] ||
        [[ "${ANSWER}" == "production" ]]
      return $?
    ;;
    "instance-id")
      echo "${ANSWER}" | egrep "^i-[0-9a-f]{8}$" &> /dev/null
      return $?
    ;;
    *)
      return 1
    ;;
  esac
}

function __strip() {
  echo $1 | psed 's/^\ *//g' | psed 's/\ *$//g'
}

### DEFAULT SETTINGS ##########################################################
COLOUR="yes"
NOTIFY="yes"
REVALIDATE="yes"
TITLE="question_script"
TYPE="yes_no"

### USER SETTINGS #############################################################
for arg in "$@"; do
  k=$(echo ${arg} | cut -d= -f1)
  v=$(echo ${arg} | cut -d= -f2-)

  case "${k}" in
    "--no-colour")      COLOUR="no"                             ;;
    "--no-revalidate")  REVALIDATE="no"                         ;;
    "--quiet")          VERBOSE="no"                            ;;
    "--title")          TITLE="$v"                              ;;
    "--type")           TYPE="$v"                               ;;
    "--verbose")        VERBOSE="yes"                           ;;
    "--no-notify")      NOTIFY="no"                             ;;
    *)                  QUESTION=$(__strip "${QUESTION} ${arg}")      ;;
  esac
done

if [[ "${TYPE}" == "yes_no" ]] && [[ -z ${VERBOSE} ]]; then
  VERBOSE="no"
else
  VERBOSE="yes"
fi

if [[ "${COLOUR}" == "yes" ]] && which cecho > /dev/null; then
  ECHO_CMD="cecho -n --magenta"
else
  ECHO_CMD="echo -n"
fi

[[ -z ${QUESTION} ]]        && usage
__type_valid                || usage
__notifier
__format_question           || usage


if [[ "${REVALIDATE}" == "yes" ]]; then
  while ! __answer_valid "${ANSWER}"; do
    ${ECHO_CMD} "${QUESTION}" > /dev/stderr
    read ANSWER
  done
else
  ${ECHO_CMD} "${QUESTION}" > /dev/stderr
  read ANSWER
  if ! __answer_valid; then echo "Invalid Response!"; exit 1; fi
fi

[[ "${VERBOSE}" == "yes" ]] && echo "${ANSWER}" && exit 0
[[ "${ANSWER}" == "no" ]] && exit 1

exit 0
