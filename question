#!/usr/bin/env bash

function usage() {
  cat <<EOF
USAGE:
  $(basename $0) [OPTIONS] <question>

OPTIONS:
  --no-colour          Don't colour the string.
  --no-notify          Do not attempt to notify with terminal-notifier.
  --no-revalidate      Exit with error if first answer is invalid.
  --quiet              Do not echo the answer.
  --title=string       Title to send to terminal notifier.
  --type=ami           An Amazon Machine Image ami-aaaaaaaa.
         date          A date (requires GNU date).
         environment   Either 'testing', 'staging' or 'production'.
         existing_file A file that should already exist.
         instance-id   An AWS instance-id like i-aaaaaaaa.
         integer       A number.
         list          A comma delimited list.
         multiword     A string of words.
         singleword    A single word.
         yes_no        Either 'yes' or 'no'. (default)
  --verbose            Echo the answer.

EOF
  exit 1
}

function __format_question() {
  case ${TYPE} in
    "ami")            QUESTION="${QUESTION} (ami-xxxxxxxx)? " ;;
    "date")           QUESTION="${QUESTION} (date)? " ;;
    "environment")    QUESTION="${QUESTION} (testing|staging|production)? " ;;
    "existing-file")  QUESTION="${QUESTION} (file)? " ;;
    "instance-id")    QUESTION="${QUESTION} (i-xxxxxxxx)? " ;;
    "integer")        QUESTION="${QUESTION} (integer)? " ;;
    "list")           QUESTION="${QUESTION} (comma delimited list)? " ;;
    "multiword")      QUESTION="${QUESTION} (string)? " ;;
    "singleword")     QUESTION="${QUESTION} (single word)? " ;;
    "yes_no")         QUESTION="${QUESTION} (yes|no)? " ;;
    *)                return 1 ;;
  esac
}

function __notifier() {
  if [[ "${NOTIFY}" == "no" ]]; then return 0; fi
  if ! which terminal-notifier &> /dev/null; then return 0; fi

  terminal-notifier \
    -message "${QUESTION}?" \
    -title "${TITLE}" \
    > /dev/null
}

function __type_valid() {
  types="ami date environment existing-file instance-id integer list multiword singleword yes_no"
  for t in ${types}; do
    if [[ ${TYPE} == $t ]]; then return 0; fi
  done
  return 1
}

function __answer_valid() {
  if [[ -z "${ANSWER}" ]]; then return 1; fi
  if [[ "${ATTEMPT}" -gt 30 ]]; then
    echo "you seem to be having a hard time. ;)"
    exit 1
  fi

  if [[ ${TYPE} == "date" ]]; then
    if ! [[ $(${DATE_CMD} --version 2> /dev/null) =~ GNU\ coreutils ]]; then
      echo "Error: You are not running GNU date."
      exit 1
    fi
  fi

  if [[ -z "${ATTEMPT}" ]]; then
    ATTEMPT=1
  else
    ATTEMPT=$(( ${ATTEMPT} + 1 ))
  fi

  case "${TYPE}" in
    "ami")            [[ "${ANSWER}" =~ ^ami-[0-9a-f]{8}$ ]]                ;;
    "date")           ANSWER=$(${DATE_CMD} --date="${ANSWER}" --rfc-3339="${DATE_ACCURACY}" 2> /dev/null) ;;
    "environment")    [[ "${ANSWER}" =~ (testing|staging|production) ]]     ;;
    "existing-file")  [[ -f "${ANSWER}" ]]                                  ;;
    "instance-id")    [[ "${ANSWER}" =~ ^i-[0-9a-f]{8}$ ]]                  ;;
    "integer")        [[ "${ANSWER}" =~ ^[0-9]+$ ]]                         ;;
    "list")           [[ "${ANSWER}" =~ ^.+$ ]]                             ;;
    "multiword")      [[ ! -z "${ANSWER}" ]]                                ;;
    "singleword")     [[ "${ANSWER}" =~ ^[^\ ]+$ ]]                         ;;
    "yes_no")         [[ "${ANSWER}" =~ (yes|no) ]]                         ;;
  esac
  return $?
}

function __strip() {
  echo $1 | psed 's/^\ *//g' | psed 's/\ *$//g'
}

function print_question() {
  cecho_path="$(which cecho)"
  if [[ -z "${cecho_path}" ]]; then COLOUR="no"; fi

  case "${COLOUR}" in
    "yes")  ${cecho_path} -n --magenta "${QUESTION}" > /dev/stderr ;;
    *)      echo -n "${QUESTION}" > /dev/stderr      ;;
  esac
}

function print_answer() {
  if [[ ${TYPE} == "list" ]]; then
    ANSWER=$(echo ${ANSWER} | sed 's/"/\\"/g')
    ANSWER=$(echo ${ANSWER} | sed 's/^/"/' | sed 's/\ *,\ */" "/g' | sed 's/$/"/')
  fi

  if [[ -z ${VERBOSE} ]]; then
    case "${TYPE}" in
      "yes_no")   VERBOSE="no"    ;;
      *)          VERBOSE="yes"   ;;
    esac
  fi

  if [[ "${VERBOSE}" == "yes" ]]; then
    echo "${ANSWER}" && exit 0
  else
    [[ ${ANSWER} != "no" ]]
    exit $?
  fi
}

### DEFAULT SETTINGS ##########################################################
COLOUR="yes"
NOTIFY="yes"
REVALIDATE="yes"
TITLE="question_script"
TYPE="yes_no"
DATE_CMD=$(which gdate || which date)
DATE_ACCURACY="seconds"

### USER SETTINGS #############################################################
for arg in "$@"; do
  k=$(echo ${arg} | cut -d= -f1)
  v=$(echo ${arg} | cut -d= -f2-)

  case "${k}" in
    "--help")                     usage                                     ;;
    "--no-colour"|"--no-color")   COLOUR="no"                               ;;
    "--no-notify")                NOTIFY="no"                               ;;
    "--no-revalidate")            REVALIDATE="no"                           ;;
    "--quiet")                    VERBOSE="no"                              ;;
    "--title")                    TITLE="$v"                                ;;
    "--type")                     TYPE="$v"                                 ;;
    "--verbose")                  VERBOSE="yes"                             ;;
    *)                            QUESTION=$(__strip "${QUESTION} ${arg}")  ;;
  esac
done

[[ -z ${QUESTION} ]]        && usage
__type_valid                || usage
__notifier
__format_question           || usage

if [[ "${REVALIDATE}" == "yes" ]]; then
  while ! __answer_valid "${ANSWER}"; do
    print_question > /dev/stderr
    read ANSWER
  done
else
  print_question > /dev/stderr
  read ANSWER
  if ! __answer_valid; then echo "Invalid Response!"; exit 1; fi
fi

print_answer

exit 0
