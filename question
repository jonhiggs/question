#!/usr/bin/env bash
STDERR="/dev/stderr"
STDOUT="/dev/stdout"
NULL="/dev/null"

function usage() {
  cat <<EOF
USAGE:
  $(basename $0) [OPTIONS] <question>

OPTIONS:
  --accepted-inputs=regex   Regular Expression describing acceptable inputs.
  --no-colour               Don't colour the string.
  --no-notify               Do not attempt to notify with terminal-notifier.
  --no-revalidate           Exit with error if first answer is invalid.
  --quiet                   Do not echo the answer.
  --title=string            Title to send to terminal notifier.
  --type=ami                An Amazon Machine Image ami-aaaaaaaa.
         date               A date (requires GNU date).
         environment        Either 'testing', 'staging' or 'production'.
         existing_file      A file that should already exist.
         instance-id        An AWS instance-id like i-aaaaaaaa.
         integer            A number.
         list               A comma delimited list.
         multiword          A string of words.
         singleword         A single word.
         yes_no             Either 'yes' or 'no'. (default)
  --verbose                 Echo the answer.

EOF
  exit 1
}

function notify() {
  [[ "${NOTIFY}" == "yes" ]] || return 0
  which terminal-notifier &> ${NULL} || return 0

  terminal-notifier \
    -message "${QUESTION}?" \
    -title "${TITLE}" \
    > ${NULL}
}

function error() {
  MSG=$1
  if [[ "${COLOUR}" == "yes" ]]; then
    cecho --red "${MSG}"
  else
    echo "${MSG}"
  fi
  exit 1
}

function set_type_settings() {
  # set the defaults
  [[ -z ${ATTEMPT} ]]     && ATTEMPT=1
  [[ -z ${ERROR_MSG} ]]   && ERROR_MSG="Invalid Response!"
  [[ -z ${NOTIFY} ]]      && NOTIFY="yes"
  [[ -z ${QUESTION} ]]    && QUESTION="Please answer..."
  [[ -z ${REVALIDATE} ]]  && REVALIDATE="yes"
  [[ -z ${TITLE} ]]       && TITLE="question_script"

  [[ -z ${TYPE} ]]        && [[ ! -z ${ACCEPTED_INPUTS} ]] && TYPE="regex"
  [[ -z ${TYPE} ]]        && TYPE="yes_no"

  [[ -z ${VERBOSE} ]]     && [[ "${TYPE}" == "yes_no" ]] && VERBOSE="no"
  [[ -z ${VERBOSE} ]]     && VERBOSE="yes"

  [[ -z ${COLOUR} ]]      && [[ ! -z "$(which cecho)" ]] && COLOUR="yes"
  [[ -z ${COLOUR} ]]      && COLOUR="no"


  case ${TYPE} in
    "ami")
      ACCEPTED_INPUTS="^ami-[a-f0-9]{8}$"
      FORMAT_HINT="ami-xxxxxxxx"
    ;;
    "date")
      ACCEPTED_INPUTS=""
      DATE_ACCURACY="seconds"
      DATE_CMD=$(which gdate || which date)
      ERROR_MSG="Not a date!"
      FORMAT_HINT="date"

      if ! [[ $(${DATE_CMD} --version 2> ${NULL}) =~ GNU\ coreutils ]]; then
        error "Error: You are not running GNU date."
      fi
    ;;
    "environment")
      ACCEPTED_INPUTS="^(testing|staging|production)$"
      ERROR_MSG="Not a valid environment!"
      FORMAT_HINT="testing|staging|production"
    ;;
    "existing-file")
      ERROR_MSG="File does not exist!"
      FORMAT_HINT="file"
    ;;
    "instance-id")
      ACCEPTED_INPUTS="^i-[a-f0-9]{8}$"
      ERROR_MSG="Not a valid instance-id!"
      FORMAT_HINT="i-xxxxxxxx"
    ;;
    "integer")
      ACCEPTED_INPUTS="^[0-9]+$"
      FORMAT_HINT="integer"
    ;;
    "list")
      FORMAT_HINT="comma delimited list"
    ;;
    "multiword")
      ACCEPTED_INPUTS="^.*[^\ ].*$"
      FORMAT_HINT="string"
    ;;
    "regex")
      FORMAT_HINT="'${ACCEPTED_INPUTS}'"
    ;;
    "singleword")
      ACCEPTED_INPUTS="^[^\ ]+$"
      FORMAT_HINT="single word"
    ;;
    "yes_no")
      ACCEPTED_INPUTS="^(yes|no)$"
      FORMAT_HINT="yes|no"
    ;;
    *)
      usage
    ;;
  esac
}

function answer_valid() {
  [[ -z "${ANSWER}" ]] && return 1
  [[ "${ATTEMPT}" -gt 30 ]] && error "you seem to be having a hard time. ;)"
  ATTEMPT=$(( ${ATTEMPT} + 1 ))

  case "${TYPE}" in
    "date") ANSWER=$(${DATE_CMD} --date="${ANSWER}" --rfc-3339="${DATE_ACCURACY}" 2> ${NULL}) ;;
    "existing-file")  [[ -f "${ANSWER}" ]] ;;
    *) echo "${ANSWER}" | egrep "${ACCEPTED_INPUTS}" &> ${NULL} ;;
  esac
  return $?
}

function __strip() {
  # strip whitespace from start and end of string.
  echo $1 | psed 's/^\ *//g' | psed 's/\ *$//g'
}

function print_question() {
  q="${QUESTION} (${FORMAT_HINT})? "
  [[ "${COLOUR}" == "yes" ]] && cecho -n --magenta "$q" > ${STDERR}
  [[ "${COLOUR}" == "no" ]]  && echo -n "$q" > ${STDERR}
}

function print_answer() {
  # convert list into quoted strings.
  if [[ ${TYPE} == "list" ]]; then
    ANSWER=$(echo ${ANSWER} | sed 's/"/\\"/g')        # escape quotes.
    ANSWER=$(echo ${ANSWER} | sed 's/^/"/')           # add a " to the start.
    ANSWER=$(echo ${ANSWER} | sed 's/\ *,\ */" "/g')  # convert , to '" "'
    ANSWER=$(echo ${ANSWER} | sed 's/$/"/')           # add a " to the end.
  fi

  [[ "${VERBOSE}" == "yes" ]] && echo "${ANSWER}"
}

function get_exitstatus() {
  answer_valid || return 1
  [[ ${VERBOSE} == "yes" ]] && return 0
  [[ ${TYPE} == "yes_no" ]] && [[ "${ANSWER}" == "no" ]] && return 1
  return 0
}

function ask_question() {
  notify
  while ! answer_valid "${ANSWER}"; do
    print_question
    read ANSWER
    [[ "${REVALIDATE}" == "no" ]] && return 0
  done
}

### RUN COMMAND ###############################################################
for arg in "$@"; do
  k=$(echo ${arg} | cut -d= -f1)
  v=$(echo ${arg} | cut -d= -f2-)

  case "${k}" in
    "--accepted-inputs")          ACCEPTED_INPUTS="$v"; TYPE="regex"        ;;
    "--help")                     usage                                     ;;
    "--no-colour"|"--no-color")   COLOUR="no"                               ;;
    "--no-notify")                NOTIFY="no"                               ;;
    "--no-revalidate")            REVALIDATE="no"                           ;;
    "--quiet")                    VERBOSE="no"                              ;;
    "--title")                    TITLE="$v"                                ;;
    "--type")                     TYPE="$v"                                 ;;
    "--verbose")                  VERBOSE="yes"                             ;;
    *)                            QUESTION=$(__strip "${QUESTION} ${arg}")  ;;
  esac
done

set_type_settings
ask_question
answer_valid || error "${ERROR_MSG}"
print_answer
get_exitstatus
exit $?
